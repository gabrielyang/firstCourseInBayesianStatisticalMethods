# Feb 16 2020, cloudy and warm and humid
# https://stephens999.github.io/fiveMinuteStats/mvnorm.html
# https://stats.stackexchange.com/questions/46523/how-to-simulate-artificial-data-for-logistic-regression

Aim: to generate samples from MVN(mu, \Sigma), where mu is of dimension p

(1) LL^T= \Sigma
(2) Z~ N_p(0, I)
(3) mu+ LZ ~ MVN(mu, \Sigma) (since LZ ~ N(0, LIL^T)=N(0, LL^T)= N(0, \Sigma); mu+ LZ ~ MVN(mu, \Sigma))


```{r}
library("MASS")

mu= c(1,2,3)
Sigma = rbind(c(3,1,1),c(1,3, 2), c(4,2,6)); Sigma
L = t(chol(Sigma))
L
# LL^T
L %*% t(L)

z= rnorm(n= 3, mean= 0, sd= 1)
# gen. one sample from MVN(mu, Sigma)
L%*% z+ mu

cholMVN= function(mu, Sigma) {
    p= length(mu)
    L = t(chol(Sigma))
    # L %*% t(L)
    z= rnorm(n= p, mean= 0, sd= 1)
    return(as.vector(L%*% z+ mu))
}

cholMVN(mu= mu, Sigma= Sigma)

mvrnorm(n= 1, mu= mu, Sigma= Sigma)


# Simulate some data, Chol for MVN(mu= Q^{-1}l, Sigma= Q^{-1}) form
library(MASS)
d = 4; n = 100
mu_true = rep(0, d); 
Sigma_true = rWishart(n = 1, 
                      df = 10, 
                      Sigma = 1/10*diag(d))[,,1]
y = mvrnorm(n = n, mu = mu_true, Sigma =Sigma_true)
dim(y)

# For the error variance, use the sample variance for now:
Sigma_inv = chol2inv(chol(var(y))) # better than solve()

# Priors: 
priorSigma_inv = diag(10^-8, d) # prior PRECISION matrix
prior_theta = rep(0, d) # prior mean

# Quadratic term:
quadTerm = n*Sigma_inv + priorSigma_inv

# Linear term: (assume y is n x d) 
ell_theta = Sigma_inv%*%colSums(y) + priorSigma_inv%*%prior_theta

# Cholesky of quadratic term
Lmat = chol(quadTerm) # NOTE: may have special form, e.g. banded/diagonal

head(Lmat) # This is upper-triangular, so we'll transpose as needed

# And sample:
a = forwardsolve(t(Lmat), ell_theta)
e = rnorm(d)
mu = backsolve(Lmat, a + e)

# Or in one line:
#mu = backsolve(Lmat, forwardsolve(t(Lmat), ell_theta) + rnorm(length(ell_theta)))
#---------------------------------------------------------------------------

# quadTerm= Q^{-1}, linTerm= l
cholMVN2= function(quadTerm, linTerm){
    Lmat = chol(quadTerm)
    mu = backsolve(Lmat, forwardsolve(t(Lmat), linTerm) + rnorm(length(linTerm)))
    return(mu)
}


```
